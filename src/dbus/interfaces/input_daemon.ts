import { buildMessage, Message } from '../dbus';
import { services, interfaces } from '../constants';

export const signals = {
  AUTH_REMOTE_START_LOGIN: 'auth_remote_start_login',
  AUTH_REMOTE_START_RECOVERY: 'auth_remote_start_recovery',
  AUTH_STATUS: 'auth_status',
  FOCUS_AUTH_FIELD: 'focus_auth_field',
  KEYBOARD_FOCUS_CHANGE: 'keyboard_focus_change',
  LID_STATE_CHANGED: 'lid_state_changed',
  SECURE_MODE: 'secure_mode',
  SYNC_AUTH_USERNAME: 'sync_auth_username',
};

export default {
  attachVkbd: (domId: number): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'attach_vkbd',
    domId,
  ),
  authBegin: (): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'auth_begin',
  ),
  authClearStatus: (): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'auth_clear_status',
  ),
  authCollectPassword: (): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'auth_collect_password',
  ),
  authCreateHash: (fname: string, password: string): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'auth_create_hash',
    fname, password,
  ),
  authGetContext: (): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'auth_get_context',
  ),
  authGetStatus: (clear: boolean): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'auth_get_status',
    clear,
  ),
  authRemoteLogin: (username: string, password: string): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'auth_remote_login',
    username, password,
  ),
  authRemoteStatus: (autoStarted: boolean, status: number, id: string, username: string,
    recoveryKeyFile: string, ctxFlags: number): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'auth_remote_status',
    autoStarted, status, id, username, recoveryKeyFile, ctxFlags,
  ),
  authRmPlatformUser: (): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'auth_rm_platform_user',
  ),
  authSetContext: (user: string, title: string): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'auth_set_context',
    user, title,
  ),
  authSetContextFlags: (user: string, title: string, flags: string): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'auth_set_context_flags',
    user, title, flags,
  ),
  authTitle: (): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'auth_title',
  ),
  detachVkbd: (domId: number): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'detach_vkbd',
    domId,
  ),
  divertKeyboardFocus: (uuid: string): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'divert_keyboard_focus',
    uuid,
  ),
  divertMouseFocus: (uuid: string, sX1: number, sY1: number, sX2: number, sY2: number, dX1: number,
    dY1: number, dX2: number, dY2: number): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'divert_mouse_focus',
    uuid, sX1, sY1, sX2, sY2, dX1, dY1, dX2, dY2,
  ),
  focusMode: (mode: number): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'focus_mode',
    mode,
  ),
  getAuthOnBoot: (): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'get_auth_on_boot',
  ),
  getCurrentKbLayout: (): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'get_current_kb_layout',
  ),
  getFocusDomid: (): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'get_focus_domid',
  ),
  getIdleTime: (): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'get_idle_time',
  ),
  getKbLayouts: (): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'get_kb_layouts',
  ),
  getLastInputTime: (): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'get_last_input_time',
  ),
  getLidState: (): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'get_lid_state',
  ),
  getMouseSpeed: (): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'get_mouse_speed',
  ),
  getPlatformUser: (): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'get_platform_user',
  ),
  getRemoteUserHash: (userId: string): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'get_remote_user_hash',
    userId,
  ),
  getUserKeydir: (): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'get_user_keydir',
  ),
  lock: (canSwitchOut: boolean): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'lock',
    canSwitchOut,
  ),
  lockTimeoutGet: (): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'lock_timeout_get',
  ),
  lockTimeoutSet: (value: number): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'lock_timeout_set',
    value,
  ),
  setAuthOnBoot: (auth: boolean): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'set_auth_on_boot',
    auth,
  ),
  setCurrentKbLayout: (layout: string): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'set_current_kb_layout',
    layout,
  ),
  setDivertKeyboardFilter: (...keyFilter: number[]): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'set_divert_keyboard_filter',
    ...keyFilter,
  ),
  setMouseSpeed: (mouseSpeed: number): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'set_mouse_speed',
    mouseSpeed,
  ),
  setSlot: (domId: number, slot: number): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'set_slot',
    domId, slot,
  ),
  stopKeyboardDivert: (): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'stop_keyboard_divert',
  ),
  stopMouseDivert: (): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'stop_mouse_divert',
  ),
  switchFocus: (domId: number, force: boolean): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'switch_focus',
    domId, force,
  ),
  touch: (uuid: string): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'touch',
    uuid,
  ),
  touchpadGet: (name: string): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'touchpad_get',
    name,
  ),
  touchpadSet: (name: string, value: string): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'touchpad_set',
    name, value,
  ),
  updateSeamlessMouseSettings: (domUuid: string): Message => buildMessage(
    services.INPUT,
    '/',
    interfaces.INPUT,
    'update_seamless_mouse_settings',
    domUuid,
  ),
};
