import { buildMessage, Message } from '../dbus';
import { services, interfaces } from '../constants';

export const signals = {
  AC_ADAPTER_STATE_CHANGED: 'ac_adapter_state_changed',
  BATTERY_INFO_CHANGED: 'battery_info_changed',
  BATTERY_LEVEL_NOTIFICATION: 'battery_level_notification',
  BATTERY_STATUS_CHANGED: 'battery_status_changed',
  BCL_KEY_PRESSED: 'bcl_key_pressed',
  NUM_BATTERIES_CHANGED: 'num_batteries_changed',
  OEM_EVENT_TRIGGERED: 'oem_event_triggered',
  POWER_BUTTON_PRESSED: 'power_button_pressed',
  SLEEP_BUTTON_PRESSED: 'sleep_button_pressed',
};

export default {
  addRule: (name: string, conditions: string, actions: string,
    undoActions: string): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'add_rule',
    name, conditions, actions, undoActions,
  ),
  addVar: (name: string, value: string): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'add_var',
    name, value,
  ),
  aggregateBatteryPercentage: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'aggregate_battery_percentage',
  ),
  aggregateBatteryState: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'aggregate_battery_state',
  ),
  aggregateBatteryTimeToEmpty: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'aggregate_battery_time_to_empty',
  ),
  aggregateBatteryTimeToFull: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'aggregate_battery_time_to_full',
  ),
  batteriesPresent: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'batteries_present',
  ),
  batteryIsPresent: (battery: number): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'battery_is_present',
    battery,
  ),
  batteryPercentage: (battery: number): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'battery_percentage',
    battery,
  ),
  batteryState: (battery: number): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'battery_state',
    battery,
  ),
  batteryTimeToEmpty: (battery: number): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'battery_time_to_empty',
    battery,
  ),
  batteryTimeToFull: (battery: number): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'battery_time_to_full',
    battery,
  ),
  clearPolicy: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'clear_policy',
  ),
  clearRules: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'clear_rules',
  ),
  clearVars: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'clear_vars',
  ),
  getAcAdapterState: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'get_ac_adapter_state',
  ),
  getActions: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'get_actions',
  ),
  getBif: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'get_bif',
  ),
  getBst: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'get_bst',
  ),
  getConditions: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'get_conditions',
  ),
  getCriticalTemperature: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'get_critical_temperature',
  ),
  getCurrentBatteryLevel: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'get_current_battery_level',
  ),
  getCurrentTemperature: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'get_current_temperature',
  ),
  getRules: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'get_rules',
  ),
  getVars: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'get_vars',
  ),
  hotkeySwitch: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'hotkey_switch',
  ),
  indicateInput: (inputValue: number): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'indicate_input',
    inputValue,
  ),
  loadPolicyFromDb: (): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'load_policy_from_db',
  ),
  loadPolicyFromFile: (fileName: string): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'load_policy_from_file',
    fileName,
  ),
  removeRule: (ruleName: string): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'remove_rule',
    ruleName,
  ),
  removeVar: (name: string): Message => buildMessage(
    services.XCPMD,
    '/',
    interfaces.XCPMD,
    'remove_var',
    name,
  ),
};
