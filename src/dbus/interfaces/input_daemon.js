import { services, interfaces } from '../constants';
import { buildMessage } from '../dbus';

export const signals = {
  KEYBOARD_FOCUS_CHANGE: 'keyboard_focus_change',
  FOCUS_AUTH_FIELD: 'focus_auth_field',
  SYNC_AUTH_USERNAME: 'sync_auth_username',
  AUTH_STATUS: 'auth_status',
  SECURE_MODE: 'secure_mode',
  AUTH_REMOTE_START_LOGIN: 'auth_remote_start_login',
  AUTH_REMOTE_START_RECOVERY: 'auth_remote_start_recovery',
  LID_STATE_CHANGED: 'lid_state_changed',
};

export const methods = {
  ATTACH_VKBD: 'attach_vkbd',
  AUTH_BEGIN: 'auth_begin',
  AUTH_CLEAR_STATUS: 'auth_clear_status',
  AUTH_COLLECT_PASSWORD: 'auth_collect_password',
  AUTH_CREATE_HASH: 'auth_create_hash',
  AUTH_GET_CONTEXT: 'auth_get_context',
  AUTH_GET_STATUS: 'auth_get_status',
  AUTH_REMOTE_LOGIN: 'auth_remote_login',
  AUTH_REMOTE_STATUS: 'auth_remote_status',
  AUTH_RM_PLATFORM_USER: 'auth_rm_platform_user',
  AUTH_SET_CONTEXT: 'auth_set_context',
  AUTH_SET_CONTEXT_FLAGS: 'auth_set_context_flags',
  AUTH_TITLE: 'auth_title',
  DETACH_VKBD: 'detach_vkbd',
  DIVERT_KEYBOARD_FOCUS: 'divert_keyboard_focus',
  DIVERT_MOUSE_FOCUS: 'divert_mouse_focus',
  FOCUS_MODE: 'focus_mode',
  GET_AUTH_ON_BOOT: 'get_auth_on_boot',
  GET_CURRENT_KB_LAYOUT: 'get_current_kb_layout',
  GET_FOCUS_DOMID: 'get_focus_domid',
  GET_IDLE_TIME: 'get_idle_time',
  GET_KB_LAYOUTS: 'get_kb_layouts',
  GET_LAST_INPUT_TIME: 'get_last_input_time',
  GET_LID_STATE: 'get_lid_state',
  GET_MOUSE_SPEED: 'get_mouse_speed',
  GET_PLATFORM_USER: 'get_platform_user',
  GET_REMOTE_USER_HASH: 'get_remote_user_hash',
  GET_USER_KEYDIR: 'get_user_keydir',
  LOCK: 'lock',
  LOCK_TIMEOUT_GET: 'lock_timeout_get',
  LOCK_TIMEOUT_SET: 'lock_timeout_set',
  SET_AUTH_ON_BOOT: 'set_auth_on_boot',
  SET_CURRENT_KB_LAYOUT: 'set_current_kb_layout',
  SET_DIVERT_KEYBOARD_FILTER: 'set_divert_keyboard_filter',
  SET_MOUSE_SPEED: 'set_mouse_speed',
  SET_SLOT: 'set_slot',
  STOP_KEYBOARD_DIVERT: 'stop_keyboard_divert',
  STOP_MOUSE_DIVERT: 'stop_mouse_divert',
  SWITCH_FOCUS: 'switch_focus',
  TOUCH: 'touch',
  TOUCHPAD_GET: 'touchpad_get',
  TOUCHPAD_SET: 'touchpad_set',
  UPDATE_SEAMLESS_MOUSE_SETTINGS: 'update_seamless_mouse_settings',
};

const path = '/';

const input = (method, ...args) => buildMessage(
  services.INPUT,
  path,
  interfaces.INPUT,
  method,
  ...args,
);

export default {
  getProperty: (name) => buildMessage(
    services.INPUT,
    path,
    interfaces.FREEDESKTOP_PROPERTIES,
    'Get',
    interfaces.INPUT, name,
  ),
  getAllProperties: () => buildMessage(
    services.INPUT,
    path,
    interfaces.FREEDESKTOP_PROPERTIES,
    'GetAll',
    interfaces.INPUT,
  ),
  setProperty: (name, value) => buildMessage(
    services.INPUT,
    path,
    interfaces.FREEDESKTOP_PROPERTIES,
    'Set',
    interfaces.INPUT, name, value,
  ),
  attachVkbd: (domId) => input(methods.ATTACH_VKBD, parseInt(domId, 10)),
  authBegin: () => input(methods.AUTH_BEGIN),
  authClearStatus: () => input(methods.AUTH_CLEAR_STATUS),
  authCollectPassword: () => input(methods.AUTH_COLLECT_PASSWORD),
  authCreateHash: (fname, password) => input(methods.AUTH_CREATE_HASH, fname, password),
  authGetContext: () => input(methods.AUTH_GET_CONTEXT),
  authGetStatus: (clear) => input(methods.AUTH_GET_STATUS, clear),
  authRemoteLogin: (username, password) => input(methods.AUTH_REMOTE_LOGIN, username, password),
  authRemoteStatus: (autoStarted, status, id, username, recoveryKeyFile, ctxFlags) => input(
    methods.AUTH_REMOTE_STATUS,
    autoStarted, parseInt(status, 10), id, username, recoveryKeyFile, ctxFlags,
  ),
  authRmPlatformUser: () => input(methods.AUTH_RM_PLATFORM_USER),
  authSetContext: (user, title) => input(methods.AUTH_SET_CONTEXT, user, title),
  authSetContextFlags: (user, title, flags) => input(
    methods.AUTH_SET_CONTEXT_FLAGS,
    user, title, parseInt(flags, 10),
  ),
  authTitle: () => input(methods.AUTH_TITLE),
  detachVkbd: (domId) => input(methods.DETACH_VKBD, parseInt(domId, 10)),
  divertKeyboardFocus: (vmUuid) => input(methods.DIVERT_KEYBOARD_FOCUS, vmUuid),
  divertMouseFocus: (sX1, sY1, sX2, sY2, dX1, dY1, dX2, dY2) => input(
    methods.DIVERT_MOUSE_FOCUS,
    sX1, sY1, sX2, sY2, dX1, dY1, dX2, dY2,
  ),
  focusMode: (mode) => input(methods.FOCUS_MODE, mode),
  getAuthOnBoot: () => input(methods.GET_AUTH_ON_BOOT),
  getCurrentKbLayout: () => input(methods.GET_CURRENT_KB_LAYOUT),
  getFocusdomId: () => input(methods.GET_FOCUS_domId),
  getIdleTime: () => input(methods.GET_IDLE_TIME),
  getKbLayouts: () => input(methods.GET_KB_LAYOUTS),
  getLastInputTime: () => input(methods.GET_LAST_INPUT_TIME),
  getLidState: () => input(methods.GET_LID_STATE),
  getMouseSpeed: () => input(methods.GET_MOUSE_SPEED),
  getPlatformUser: () => input(methods.GET_PLATFORM_USER),
  getRemoteUserHash: (userId) => input(methods.GET_REMOTE_USER_HASH, userId),
  getUserKeydir: (user) => input(methods.GET_USER_KEYDIR, user),
  lock: (canSwitchOut) => input(methods.LOCK, canSwitchOut),
  lockTimeoutGet: () => input(methods.LOCK_TIMEOUT_GET),
  lockTimeoutSet: (value) => input(methods.LOCK_TIMEOUT_SET, parseInt(value, 10)),
  setAuthOnBoot: (value) => input(methods.SET_AUTH_ON_BOOT, value),
  setCurrentKbLayout: (value) => input(methods.SET_CURRENT_KB_LAYOUT, value),
  setDivertKeyboardFilter: (value) => input(methods.SET_DIVERT_KEYBOARD_FILTER, value),
  setMouseSpeed: (value) => input(methods.SET_MOUSE_SPEED, parseInt(value, 10)),
  setSlot: (domId, slot) => input(methods.SET_SLOT, parseInt(domId, 10), parseInt(slot, 10)),
  stopKeyboardDivert: () => input(methods.STOP_KEYBOARD_DIVERT),
  stopMouseDivert: () => input(methods.STOP_MOUSE_DIVERT),
  switchFocus: (domId, force) => input(methods.SWITCH_FOCUS, parseInt(domId, 10), force),
  touch: (uuid) => input(methods.TOUCH, uuid),
  touchpadGet: (prop) => input(methods.TOUCHPAD_GET, prop),
  touchpadSet: (prop, value) => input(methods.TOUCHPAD_SET, prop, value),
  updateSeamlessMouseSettings: (domUuid) => input(methods.UPDATE_SEAMLESS_MOUSE_SETTINGS, domUuid),
};
